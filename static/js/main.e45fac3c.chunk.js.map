{"version":3,"sources":["cmps/YTservice.jsx","cmps/Article.jsx","pages/HomeWithHooks.jsx","App.js","serviceWorker.js","index.js"],"names":["YTservice","width","height","src","Component","Article","className","href","target","HomeWithHooks","props","useState","darkMode","setDarkMode","chosenName","setChosenName","darkModeHandler","nameHandler","name","style","backgroundColor","onClick","bind","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAGqBA,E,uKAEjB,OACE,4BACEC,MAAM,MACNC,OAAO,MACPC,IAAI,kD,GAN2BC,aCDlBC,E,uKAmDjB,OACE,yBAAKC,UAAU,WACb,uBAAGA,UAAU,MAnDT,sfAoDJ,wBAAIA,UAAU,QAAd,sBACA,uBAAGA,UAAU,MA7CT,+nBA8CJ,uBAAGA,UAAU,MApCT,oPAqCJ,uBAAGA,UAAU,MAhCT,sGAiCJ,uBAAGA,UAAU,MA9BT,8CA+BJ,yBAAKA,UAAU,SACf,uBAAGA,UAAU,MA9BT,yDA+BJ,yBAAKA,UAAU,SACf,uBAAGA,UAAU,MA9BT,2IA+BJ,uBAAGA,UAAU,MA5BT,8TA6BJ,wBAAIA,UAAU,QAAd,6BACA,wBAAIA,UAAU,OACd,wBAAIA,UAAU,OA1BT,0DA2BL,wBAAIA,UAAU,OA1BT,8HA2BL,wBAAIA,UAAU,OA1BT,gIA4BL,uBAAGA,UAAU,OA1BR,gfA2BL,uBAAGA,UAAU,OAzBR,ioBA0BL,uBAAGA,UAAU,OAxBR,qFAwBmB,uBAAGC,KAAK,2BAA2BC,OAAO,UAA1C,WACxB,wBAAIF,UAAU,QAAd,2B,GAzE6BF,aCyEtBK,EAtEO,SAACC,GAAW,IAAD,EACCC,oBAAS,GADV,mBACxBC,EADwB,KACdC,EADc,OAEKF,mBAAS,QAFd,mBAExBG,EAFwB,KAEZC,EAFY,KAIzBC,EAAkB,WACtBH,GAAaD,IAGTK,EAAc,SAACC,GACnBH,EAAcG,IA0DhB,OAlDE,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,UACb,uBAAGC,KAAK,0BAA0BC,OAAO,UACvC,yBAAKF,UAAU,WAInB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,OAGF,yBACEA,UAAU,oBACVa,MAAO,CACLC,gBAAiBR,EAAW,UAAY,aAGxCA,GAAY,4BAAQS,QAASL,GAAjB,WACbJ,GAAY,4BAAQS,QAASL,GAAjB,YACb,yBAAKV,UAAU,gBACb,yBAAKA,UAAU,aACb,4BAAQe,QAASJ,EAAYK,U,EAAW,SAAxC,QACA,4BAAQD,QAASJ,EAAYK,U,EAAW,WAAxC,UACA,4BAAQD,QAASJ,EAAYK,U,EAAW,QAAxC,QAEF,yBACEhB,UAAU,cACVa,MAAO,CACLI,MAAQX,EAAuB,UAAZ,YAGpBE,KAIP,kBAAC,EAAD,MACA,yBAAKR,UAAU,gBACb,sCA3CS,mnCAgDb,yBAAKA,UAAU,UACb,uBAAGC,KAAK,0BAA0BC,OAAO,UACvC,yBAAKF,UAAU,aC7DJkB,E,uKAEjB,OACE,6BAEE,kBAAC,EAAD,W,GALyBpB,aCMbqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e45fac3c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nexport default class YTservice extends Component {\r\n  render() {\r\n    return (\r\n      <iframe\r\n        width=\"620\"\r\n        height=\"480\"\r\n        src=\"https://www.youtube.com/embed/2CwEOGM4NsA\"\r\n      ></iframe>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Article extends Component {\r\n  render() {\r\n    const p1 = `It’s been almost 2 years since we’ve been introduced to React Hooks,\r\n      and yet it seems that many developers are still holding on to the old\r\n      state management methods of class components and their lifecycles.\r\n      Now, there’s nothing wrong about keeping old habits which we feel\r\n      comfortable with (as long as they’re not bad ones), but it’s always a\r\n      good practice to pick up new skills - especially when they can make\r\n      our work much easier.`;\r\n\r\n    const p2 = `Whether you are an avid React developer, or just started using it\r\n      lately, you know how class components work: every component holds a\r\n      mutable state object with keys and values which refer individually to\r\n      elements in the component, and determine their specific state. React\r\n      Hooks (or just “Hooks”) allow you to build your entire React app with\r\n      functional components only. Yes, that’s right, no more classes. State\r\n      management, lifecycle methods & side effects, and many other things\r\n      can now all be implemented in functional components - with the help of\r\n      these Hooks.`;\r\n\r\n    const p3 = `This doesn’t mean that classes belong in the past - in some cases\r\n      their functionality is still useful, and either way, class components\r\n      and functional components can be implemented side by side in the same\r\n      project.`;\r\n\r\n    const p4 = `With that being said, let’s dive in and see how Hooks look like, and\r\n      how they are used`;\r\n\r\n    const p5 = `This is how we managed state before Hooks:`;\r\n\r\n    const p6 = `And this is how we do the same thing, but with Hooks:`;\r\n\r\n    const p7 = `This may seem a bit confusing at first, but let me tell you - once you\r\n      get how Hooks work, managing your state becomes a breeze.`;\r\n\r\n    const p8 = `Let’s start with useState(). This is a so-called Hook used to manage\r\n      state in a functional component. In order to use it (and all other\r\n      types of Hooks, but we’ll talk about it in another article), we first\r\n      need to import { useState } from ‘react’, instead of { Component }.`;\r\n\r\n    const li1 = `1. We pass in an initial state (e.g ‘false’)`;\r\n    const li2 = `2. It returns an array of exactly 2 elements ( [darkMode, setDarkMode]  => our current state and a state-setting function)`;\r\n    const li3 = `3. When we need to change the state, we address the first element and set it with the second element - which is a function.`;\r\n    \r\n    const p10 = `As you might have noticed, we had 2 properties in the state object of the class component example, that are now divided into separated constants with Hooks in the functional component example. The meaning of this is that no longer do we need to access our state using setState, prevState, this.state.element, and so forth. Instead, we just call the specific state property we wish to change, along with it’s “private” setter function, and let React Hooks protocol do the rest. `;\r\n\r\n    const p11 = `This is just a fraction of Hooks’ capabilities. Another Hook, useEffect(), is used for handling side-effects that should be executed in the render cycle (http requests, for example) and essentially it replaces the old componentDidMount method. In the next article we will dive deeper into this matter, but for now I recommend to follow the instructions in the attached video above, and then go ahead and try implementing Hooks in one of your projects. Remember, there’s no need to refactor a whole project. You can start by changing just one class component into a functional component with React Hooks, and see how it feels :)`;\r\n\r\n    const p12 = `That’s it for now. For more handy videos and articles - check out my blog at `\r\n    \r\n\r\n    return (\r\n      <div className=\"article\">\r\n        <p className=\"p1\">{p1}</p>\r\n        <h3 className=\"h3-1\">So what ARE Hooks?</h3>\r\n        <p className=\"p2\">{p2}</p>\r\n        <p className=\"p3\">{p3}</p>\r\n        <p className=\"p4\">{p4}</p>\r\n        <p className=\"p5\">{p5}</p>\r\n        <div className=\"img1\" />\r\n        <p className=\"p6\">{p6}</p>\r\n        <div className=\"img2\" />\r\n        <p className=\"p7\">{p7}</p>\r\n        <p className=\"p8\">{p8}</p>\r\n        <h3 className=\"h3-2\">And this is how it works:</h3>\r\n        <ul className=\"ul9\">\r\n        <li className=\"li1\">{li1}</li>\r\n        <li className=\"li2\">{li2}</li>\r\n        <li className=\"li3\">{li3}</li>\r\n        </ul>\r\n        <p className=\"p10\">{p10}</p>\r\n        <p className=\"p11\">{p11}</p>\r\n        <p className=\"p12\">{p12}<a href=\"https://blog.codota.com/\" target=\"_blank\">Codota</a></p>\r\n        <h3 className=\"h3-3\">See you next time!</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","\r\nimport React, { useState } from \"react\";\r\nimport YTservice from \"../cmps/YTservice\";\r\nimport Article from \"../cmps/Article\";\r\n\r\nconst HomeWithHooks = (props) => {\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [chosenName, setChosenName] = useState(\"Jack\");\r\n  \r\n  const darkModeHandler = () => {\r\n    setDarkMode(!darkMode);\r\n  };\r\n  \r\n  const nameHandler = (name) => {\r\n    setChosenName(name);\r\n  };\r\n  \r\n  const aboutCodota = `In an increasingly ever-moving faster industry, entrepreneurs, frame architects, product managers and developers are always in search of the most powerful instruments out there to help them maintain their front line spot.\r\n  Codota provides AI based code-completion tools that help developers write code faster without wasting precious time on typing and online searches; prevent bugs and errors by using suggestions of proven pre-tested code, and allow developers to discover new open source code without ever leaving their IDE. One of Codota’s main features is TabNine, a cutting-edge yet easy-to-use autocomplete extension which works with any IDE and supports Java, Javascript, TypeScript, Python, PHP, Go, Ruby, C, C++, Rust, C#, and pretty much anything else. The developer is offered full chunks of code suggestions based on their current code production, while keeping the supported project neat, clean and safe. The AI algorithms are sharpened daily and rely on vast-scale open source databases, and Codota’s tools are already used globally by developers at Google, Amazon, Airbnb, Alibaba, Netflix and many others.`;\r\n\r\n\r\n  let content = (\r\n    <div className=\"home-page\">\r\n      <div className=\"header\">\r\n        <a href=\"https://www.codota.com/\" target=\"_blank\">\r\n          <div className=\"logo\" />\r\n        </a>\r\n      </div>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"yt-section\">\r\n          <YTservice />\r\n        </div>\r\n\r\n        <div\r\n          className=\"example-container\"\r\n          style={{\r\n            backgroundColor: darkMode ? \"#211c1c\" : \"#efefef\",\r\n          }}\r\n        >\r\n          {!darkMode && <button onClick={darkModeHandler}>Go Dark</button>}\r\n          {darkMode && <button onClick={darkModeHandler}>Go Light</button>}\r\n          <div className=\"name-chooser\">\r\n            <div className=\"name-btns\">\r\n              <button onClick={nameHandler.bind(this, \"Jack\")}>Jack</button>\r\n              <button onClick={nameHandler.bind(this, \"Shelly\")}>Shelly</button>\r\n              <button onClick={nameHandler.bind(this, \"Zoe\")}>Zoe</button>\r\n            </div>\r\n            <div\r\n              className=\"chosen-name\"\r\n              style={{\r\n                color: !darkMode ? \"#211c1c\" : \"#efefef\",\r\n              }}\r\n            >\r\n              {chosenName}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Article />\r\n        <div className=\"about-codota\">\r\n          <h2>Codota</h2>\r\n          {aboutCodota}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"footer\">\r\n        <a href=\"https://www.codota.com/\" target=\"_blank\">\r\n          <div className=\"logo\" />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n  return content;\r\n};\r\n\r\nexport default HomeWithHooks;\r\n","\nimport React, { Component } from 'react'\nimport './assets/styles/global.scss';\n// import Home from './pages/Home.jsx';\nimport HomeWithHooks from './pages/HomeWithHooks.jsx';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        {/* <Home /> */}\n        <HomeWithHooks />\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}